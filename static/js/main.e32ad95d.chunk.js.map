{"version":3,"sources":["components/intable.js","components/accountOverview.js","router/graph.js","router/trades.js","router/team.js","App.js","serviceWorker.js","index.js"],"names":["Intable","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","size","_this2","console","log","axios","get","then","res","trades","JSON","parse","data","setState","map","trade","react_default","a","createElement","filled_at","symbol","qty","filled_avg_price","side","className","lib","getRows","Component","account","cash","parseInt","info","portfolio_value","buying_power","gainLoss","createcard","Graph","accountOverview_account","intable_Intable","Trades","Team","App","react_router_dom","to","react_router","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e32ad95d.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport {Table} from 'react-materialize';\r\nimport axios from 'axios';\r\n\r\nexport default class Intable extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {size: 3}\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(\"HERE\");\r\n    axios.get(`https://hspapi.herokuapp.com/v1/trades`)\r\n      .then(res => {\r\n        const trades = JSON.parse(res.data.trades);\r\n        this.setState({ trades });\r\n      });\r\n  }\r\n\r\n  getRows(trades){\r\n    if (!trades) return null;\r\n    return trades.map(trade => {\r\n      return <tr><td>{trade.filled_at}</td><td>{trade.symbol}</td><td>{trade.qty}</td><td>${trade.filled_avg_price}</td><td>{trade.side}</td></tr>\r\n    });\r\n  }\r\n\r\n  render(){\r\n    // let rows = [];\r\n    // for (var i = 0; i < this.state.size; i++){\r\n    //   let rowID = `row${i}`\r\n    //   let cell = []\r\n    //   for (var idx = 0; idx < this.state.size; idx++){\r\n    //     let cellID = `cell${i}-${idx}`\r\n    //     cell.push(<td key={cellID} id={cellID}>{idx}</td>)\r\n    //   }\r\n    //   rows.push(<tr key={i} id={rowID}>{cell}</tr>)\r\n    // }\r\n    return(\r\n      <div className='container'>\r\n        <Table>\r\n          <thead>\r\n            <tr>\r\n                <th>Date</th>\r\n                <th>Stock</th>\r\n                <th>Quantity</th>\r\n                <th>Price</th>\r\n                <th>Buy/Sell</th>\r\n            </tr>\r\n          </thead>\r\n            <tbody>\r\n              {this.getRows(this.state.trades)}\r\n            </tbody>\r\n          </Table>\r\n      </div>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react'\r\nimport axios from 'axios';\r\n\r\nexport default class account extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {size: 3}\r\n  }\r\n  gainLoss(cash){\r\n    return parseInt(cash) - 100000;\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    console.log(\"HERE\");\r\n    axios.get(`https://hspapi.herokuapp.com/v1/account_info`)\r\n      .then(res => {\r\n        const account = JSON.parse(res.data.info);\r\n        this.setState({ account });\r\n      });\r\n  }\r\n\r\n  createcard(account){\r\n    if (!account) return null;\r\n    return <div><p>Account Value: ${account.portfolio_value}</p>\r\n    <p>Buying Power: ${account.buying_power}</p>\r\n    <p>Gain/Loss: ${this.gainLoss(account.cash)}</p> </div>;\r\n  }\r\n\r\n  render(){\r\n    return(\r\n        <div className=\"row\">\r\n        <div className=\"col s12 m12\">\r\n          <div className=\"card blue-grey darken-1\">\r\n            <div className=\"card-content white-text\">\r\n              <span className=\"card-title\">Account Information</span>\r\n              {this.createcard(this.state.account)}             \r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport {\r\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\r\n} from 'recharts';\r\nimport TableInvest from '../components/intable.js';\r\nimport AccountCard from '../components/accountOverview.js';\r\n\r\n\r\n\r\n\r\n\r\nconst data = [\r\n    {\r\n      name: 'Page A', uv: 4000, pv: 2400, amt: 2400,\r\n    },\r\n    {\r\n      name: 'Page B', uv: 3000, pv: 1398, amt: 2210,\r\n    },\r\n    {\r\n      name: 'Page C', uv: 2000, pv: 9800, amt: 2290,\r\n    },\r\n    {\r\n      name: 'Page D', uv: 2780, pv: 3908, amt: 2000,\r\n    },\r\n    {\r\n      name: 'Page E', uv: 1890, pv: 4800, amt: 2181,\r\n    },\r\n    {\r\n      name: 'Page F', uv: 2390, pv: 3800, amt: 2500,\r\n    },\r\n    {\r\n      name: 'Page G', uv: 3490, pv: 4300, amt: 2100,\r\n    },\r\n  ];\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Graph extends Component {\r\n    render() {\r\n      return (\r\n        <div className=\"App\">\r\n          <header className=\"header\">\r\n\r\n              <h3>Senior Project High Frequency Trading</h3>\r\n              <h5>Computer Engineering | University of Utah</h5>\r\n          </header>\r\n          {/* <div className=\"graph-container\">\r\n            <div className=\"graph\">\r\n              <LineChart\r\n              width={500}\r\n              height={300}\r\n              data={data}\r\n              margin={{\r\n                top: 5, right: 30, left: 20, bottom: 5,\r\n              }}\r\n            >\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"name\" />\r\n              <YAxis />\r\n              <Tooltip />\r\n              <Legend />\r\n              <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\r\n              <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#82ca9d\" />\r\n            </LineChart>\r\n            </div>\r\n          </div> */}\r\n          <AccountCard />\r\n          <TableInvest />\r\n        </div>\r\n  \r\n      );\r\n    }\r\n  }\r\n  \r\n  export default Graph;","import React, { Component } from \"react\";\r\n \r\nclass Trades extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Twitter Feeds</h2>\r\n        <p>Twitter is often considered where information will hit first.\r\n            Twitter users are also notorious for having strong opinions on current events.\r\n            Taking both of these things into consideration, our trading algorithm\r\n            uses the emotional conotation of Twitter users tweets about certain current events.\r\n        </p>\r\n \r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Trades;","import React, { Component } from \"react\";\r\n \r\nclass Team extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Donovan</h2>\r\n        <p>Determined to work from home, Donovan has spent the past year\r\n            coming up with business ideas and teaching himself software engineering.\r\n            wow!\r\n        </p>\r\n        <h2>Zane</h2>\r\n        <p>\r\n            A true hardware dude, but still capable of taking on the challenges of \r\n            a software project. We're just lucky to have him.\r\n        </p>\r\n        <h2>Mohit</h2>\r\n        <p>A guru in both web architecutre + design and finance, be sure to keep \r\n            him on your radar!\r\n        </p>\r\n        <h2>JoCee </h2>\r\n        <p>\r\n            Headed to New York!\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Team;","import React, { Component } from 'react';\nimport './App.css';\nimport Graph from './router/graph';\nimport Trades from './router/trades';\nimport Team from './router/team';\nimport {\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\n\n\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\n\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"navigation\">\n        <nav >\n          <ul>\n            <li>\n              <Link to=\"/trading_frontend/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/trading_frontend/team/\">Team</Link>\n            </li>\n            <li>\n              <Link to=\"/trading_frontend/trades/\">Trades</Link>\n            </li>\n          </ul>\n        </nav>\n\n        <Route path=\"/trading_frontend/\" exact component={Graph} />\n        <Route path=\"/trading_frontend/team/\" component={Team} />\n        <Route path=\"/trading_frontend/trades/\" component={Trades} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}